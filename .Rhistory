library(shiny)
library(shinydashboard)
library(DT)
library(dplyr)
# Read the CSV file
data <- read.csv("anaesthesia_data.csv")
# UI
ui <- dashboardPage(
dashboardHeader(title = "Categories"),
dashboardSidebar(
sidebarMenu(
menuItem("Categories", tabName = "categories", icon = icon("list")),
menuItem("Favourites", tabName = "favourites", icon = icon("star")),
menuItem("Time Units", tabName = "time_units", icon = icon("clock")),
menuItem("Cal", tabName = "cal", icon = icon("calculator"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "categories",
fluidRow(
box(
title = "Categories",
width = 12,
solidHeader = TRUE,
status = "primary",
collapsible = FALSE,
uiOutput("categoryButtons")
)
),
fluidRow(
box(
width = 12,
DTOutput("categoryTable")
)
)
)
)
)
)
# Server
server <- function(input, output, session) {
# Generate category buttons
output$categoryButtons <- renderUI({
categories <- unique(data$Group)
lapply(categories, function(cat) {
actionButton(cat, cat,
style = "margin: 5px; width: 100%; text-align: left;",
class = "btn-block")
})
})
# Create reactive value for selected category
selected_category <- reactiveVal()
# Update selected category when a button is clicked
observeEvent(input[unique(data$Group)], {
clicked_button <- names(input[unique(data$Group)])[which(sapply(input[unique(data$Group)], isTruthy))]
selected_category(clicked_button)
})
# Filter and display data based on selected category
output$categoryTable <- renderDT({
req(selected_category())
filtered_data <- data %>%
filter(Group == selected_category()) %>%
select(Item.No., Description, Units)
datatable(filtered_data,
options = list(pageLength = 10,
lengthMenu = c(10, 25, 50),
searching = FALSE,
info = FALSE),
rownames = FALSE)
})
}
# Run the app
shinyApp(ui, server)
# Load required libraries
library(shiny)
library(shinydashboard)
library(DT)
library(dplyr)
# Read the CSV file
data <- read.csv("anaesthesia_data.csv")
# UI
ui <- dashboardPage(
dashboardHeader(title = "Categories"),
dashboardSidebar(
sidebarMenu(
menuItem("Categories", tabName = "categories", icon = icon("list")),
menuItem("Favourites", tabName = "favourites", icon = icon("star")),
menuItem("Time Units", tabName = "time_units", icon = icon("clock")),
menuItem("Cal", tabName = "cal", icon = icon("calculator"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "categories",
fluidRow(
box(
title = "Categories",
width = 12,
solidHeader = TRUE,
status = "primary",
collapsible = FALSE,
uiOutput("categoryButtons")
)
),
fluidRow(
box(
width = 12,
DTOutput("categoryTable")
)
)
)
)
)
)
# Server
server <- function(input, output, session) {
# Generate category buttons
output$categoryButtons <- renderUI({
categories <- unique(data$Group)
lapply(categories, function(cat) {
actionButton(cat, cat,
style = "margin: 5px; width: 100%; text-align: left;",
class = "btn-block")
})
})
# Create reactive value for selected category
selected_category <- reactiveVal()
# Update selected category when a button is clicked
observeEvent(input[unique(data$Group)], {
clicked_button <- names(input[unique(data$Group)])[which(sapply(input[unique(data$Group)], isTruthy))]
selected_category(clicked_button)
})
# Filter and display data based on selected category
output$categoryTable <- renderDT({
req(selected_category())
filtered_data <- data %>%
filter(Group == selected_category()) %>%
select(Item.No., Description, Units)
datatable(filtered_data,
options = list(pageLength = 10,
lengthMenu = c(10, 25, 50),
searching = FALSE,
info = FALSE),
rownames = FALSE)
})
}
# Run the app
shinyApp(ui, server)
# Load required libraries
library(shiny)
library(shinydashboard)
library(DT)
library(dplyr)
# Read the CSV file
data <- read.csv("anaesthesia_data.csv")
# UI
ui <- dashboardPage(
dashboardHeader(title = "Categories"),
dashboardSidebar(
sidebarMenu(
menuItem("Categories", tabName = "categories", icon = icon("list")),
menuItem("Favourites", tabName = "favourites", icon = icon("star")),
menuItem("Time Units", tabName = "time_units", icon = icon("clock")),
menuItem("Cal", tabName = "cal", icon = icon("calculator"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "categories",
fluidRow(
box(
title = "Categories",
width = 12,
solidHeader = TRUE,
status = "primary",
collapsible = FALSE,
uiOutput("categoryButtons")
)
),
fluidRow(
box(
width = 12,
DTOutput("categoryTable")
)
)
)
)
)
)
# Server
server <- function(input, output, session) {
# Generate category buttons
output$categoryButtons <- renderUI({
categories <- unique(data$Group)
lapply(categories, function(cat) {
actionButton(inputId = paste0("btn_", make.names(cat)),
label = cat,
style = "margin: 5px; width: 100%; text-align: left;",
class = "btn-block")
})
})
# Create reactive value for selected category
selected_category <- reactiveVal()
# Update selected category when a button is clicked
observe({
categories <- unique(data$Group)
for (cat in categories) {
button_id <- paste0("btn_", make.names(cat))
observeEvent(input[[button_id]], {
selected_category(cat)
})
}
})
# Filter and display data based on selected category
output$categoryTable <- renderDT({
req(selected_category())
filtered_data <- data %>%
filter(Group == selected_category()) %>%
select(Item.No., Description, Units)
datatable(filtered_data,
options = list(pageLength = 10,
lengthMenu = c(10, 25, 50),
searching = FALSE,
info = FALSE),
rownames = FALSE)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(DT)
# Read the CSV data
data <- read.csv("anaesthesia_data.csv", stringsAsFactors = FALSE)
# Define UI
ui <- fluidPage(
titlePanel("Anaesthesia Data Viewer"),
sidebarLayout(
sidebarPanel(
selectInput("group", "Select Group:",
choices = c("All", unique(data$Group)),
selected = "All")
),
mainPanel(
DTOutput("data_table")
)
)
)
# Define server logic
server <- function(input, output) {
# Filter data based on selected group
filtered_data <- reactive({
if (input$group == "All") {
data
} else {
data %>% filter(Group == input$group)
}
})
# Render the data table
output$data_table <- renderDT({
filtered_data() %>%
select(`Sub Group`, `Item No.`, `MBS Item No.`, Units, Description,
`MBS Fee`, `MBS Units`, `MBS Fee Note`, Note,
`Has other modifier`, `Has time modifer`) %>%
datatable(options = list(pageLength = 10,
scrollX = TRUE,
autoWidth = TRUE),
rownames = FALSE)
})
}
# Run the application
shinyApp(ui = ui, server = server)
View(data)
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
library(shiny)
library(dplyr)
library(DT)
library(jsonlite)
library(shiny)
library(dplyr)
library(DT)
# Read the JSON data
data <- fromJSON("anaesthesia_data.json")
library(jsonlite)
library(shiny)
library(dplyr)
library(DT)
# Read the JSON data as if it were a CSV file
df <- read.csv("anaesthesia_data.json", header = TRUE, stringsAsFactors = FALSE)
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
install.packages("jsonlite")
remove.packages("jsonlite", lib="C:/Users/bfiripis/AppData/Local/Programs/R/R-4.3.0/library")
library(jsonlite)
detach("package:jsonlite", unload = TRUE)
library(jsonlite)
remove.packages("bslib", lib="C:/Users/bfiripis/AppData/Local/Programs/R/R-4.3.0/library")
detach("package:jsonlite", unload = TRUE)
library(jsonlite)
library(shiny)
library(dplyr)
library(DT)
library(jsonlite)
# Read the JSON data
data <- fromJSON("anaesthesia_data.json")
# Convert the data to a data frame
df <- as.data.frame(data)
# Define UI
ui <- fluidPage(
titlePanel("Anaesthesia Data Viewer"),
sidebarLayout(
sidebarPanel(
selectInput("group", "Select Group:",
choices = c("All", unique(df$Group)),
selected = "All")
),
mainPanel(
DTOutput("data_table")
)
)
)
# Define server logic
server <- function(input, output) {
# Filter data based on selected group
filtered_data <- reactive({
if (input$group == "All") {
df
} else {
df %>% filter(Group == input$group)
}
})
# Render the data table
output$data_table <- renderDT({
filtered_data() %>%
select(`Sub.Group`, `Item.No.`, `MBS.Item.No.`, Units, Description,
`MBS.Fee`, `MBS.Units`, `MBS.Fee.Note`, Note,
`Has.other.modifier`, `Has.time.modifer`) %>%
datatable(options = list(pageLength = 10,
scrollX = TRUE,
autoWidth = TRUE),
rownames = FALSE)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(DT)
library(jsonlite)
# Read the JSON data
data <- fromJSON("anaesthesia_data.json")
# Convert the data to a data frame
df <- as.data.frame(data)
# Define UI
ui <- fluidPage(
titlePanel("ASA Relative Value Guide"),
sidebarLayout(
sidebarPanel(
selectInput("group", "Select Group:",
choices = c("All", unique(df$Group)),
selected = "All")
),
mainPanel(
DTOutput("data_table")
)
)
)
install.packages("bslib")
install.packages("bslib")
library(shiny)
library(dplyr)
library(DT)
library(jsonlite)
# Read the JSON data
data <- fromJSON("anaesthesia_data.json")
# Convert the data to a data frame
df <- as.data.frame(data)
# Define UI
ui <- fluidPage(
titlePanel("ASA Relative Value Guide"),
sidebarLayout(
sidebarPanel(
selectInput("group", "Select Group:",
choices = c("All", unique(df$Group)),
selected = "All")
),
mainPanel(
DTOutput("data_table")
)
)
)
detach("package:jsonlite", unload = TRUE)
detach("package:dplyr", unload = TRUE)
detach("package:DT", unload = TRUE)
detach("package:datasets", unload = TRUE)
detach("package:shiny", unload = TRUE)
install.packages("bslib")
install.packages("bslib")
install.packages("bslib")
install.packages("bslib")
install.packages(c("cli", "clock", "cubature", "Deriv", "dials", "e1071", "future", "ggplot2", "hardhat", "ipred", "labelled", "lhs", "modeldata", "mosaicCalc", "parallelly", "patchwork", "prodlim", "recipes", "rlang", "s2", "sf", "sp", "timeDate", "wk"))
install.packages(c("abind", "askpass", "backports", "bit", "bit64", "boot", "brio", "broom", "cachem", "callr", "car", "checkmate", "class", "cli", "cluster", "codetools", "colorspace", "commonmark", "corrplot", "cowplot", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "evaluate", "fansi", "farver", "fastmap", "foreign", "fs", "ggplot2", "ggpmisc", "ggpp", "ggrepel", "ggsci", "ggthemes", "glue", "gtable", "haven", "highr", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "KernSmooth", "knitr", "labeling", "later", "lattice", "learnr", "lifecycle", "lme4", "lubridate", "markdown", "MatrixModels", "mgcv", "minqa", "multcomp", "multcompView", "munsell", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "progress", "promises", "ps", "quantreg", "ragg", "Rcpp", "RcppEigen", "readr", "rematch", "renv", "reprex", "rlang", "rmarkdown", "rpart", "rprojroot", "rstudioapi", "rvest", "sandwich", "sass", "scales", "shiny", "SparseM", "spatial", "splus2R", "stringi", "stringr", "survival", "systemfonts", "testthat", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "utf8", "uuid", "vctrs", "vroom", "waldo", "withr", "xfun", "xml2", "xts", "yaml"), lib="C:/Users/bfiripis/AppData/Local/Programs/R/R-4.3.0/library")
install.packages("bslib")
install.packages("bslib")
install.packages("bslib")
library(shiny)
library(dplyr)
library(DT)
library(jsonlite)
library(shiny)
library(dplyr)
library(DT)
library(jsonlite)
# Read the JSON data
data <- fromJSON("anaesthesia_data.json")
# Convert the data to a data frame
df <- as.data.frame(data)
# Define UI
ui <- fluidPage(
titlePanel("ASA Relative Value Guide"),
sidebarLayout(
sidebarPanel(
selectInput("group", "Select Group:",
choices = c("All", unique(df$Group)),
selected = "All")
),
mainPanel(
DTOutput("data_table")
)
)
)
install.packages(c("cli", "clock", "cubature", "Deriv", "dials", "e1071", "future", "ggplot2", "hardhat", "ipred", "labelled", "lhs", "modeldata", "mosaicCalc", "parallelly", "patchwork", "prodlim", "recipes", "rlang", "s2", "sf", "sp", "timeDate", "wk"))
install.packages(c("abind", "askpass", "backports", "bit", "bit64", "boot", "brio", "broom", "cachem", "callr", "car", "checkmate", "class", "cli", "cluster", "codetools", "colorspace", "commonmark", "corrplot", "cowplot", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "evaluate", "fansi", "farver", "fastmap", "foreign", "fs", "ggplot2", "ggpmisc", "ggpp", "ggrepel", "ggsci", "ggthemes", "glue", "gtable", "haven", "highr", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "KernSmooth", "knitr", "labeling", "later", "lattice", "learnr", "lifecycle", "lme4", "lubridate", "markdown", "MatrixModels", "mgcv", "minqa", "multcomp", "multcompView", "munsell", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "progress", "promises", "ps", "quantreg", "ragg", "Rcpp", "RcppEigen", "readr", "rematch", "renv", "reprex", "rlang", "rmarkdown", "rpart", "rprojroot", "rstudioapi", "rvest", "sandwich", "sass", "scales", "shiny", "SparseM", "spatial", "splus2R", "stringi", "stringr", "survival", "systemfonts", "testthat", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "utf8", "uuid", "vctrs", "vroom", "waldo", "withr", "xfun", "xml2", "xts", "yaml"), lib="C:/Users/bfiripis/AppData/Local/Programs/R/R-4.3.0/library")
install.packages("bslib")
install.packages("bslib")
install.packages("bslib")
library(shiny)
library(dplyr)
library(DT)
library(jsonlite)
# Read the JSON data
data <- fromJSON("anaesthesia_data.json")
# Convert the data to a data frame
df <- as.data.frame(data)
# Define UI
ui <- fluidPage(
titlePanel("ASA Relative Value Guide"),
sidebarLayout(
sidebarPanel(
selectInput("group", "Select Group:",
choices = c("All", unique(df$Group)),
selected = "All")
),
mainPanel(
DTOutput("data_table")
)
)
)
install.packages("BSLIB")
install.packages("bslib")
install.packages("bslib")
library(shiny)
library(dplyr)
library(DT)
library(jsonlite)
# Read the JSON data
data <- fromJSON("anaesthesia_data.json")
# Convert the data to a data frame
df <- as.data.frame(data)
# Define UI
ui <- fluidPage(
titlePanel("ASA Relative Value Guide"),
sidebarLayout(
sidebarPanel(
selectInput("group", "Select Group:",
choices = c("All", unique(df$Group)),
selected = "All")
),
mainPanel(
DTOutput("data_table")
)
)
)
library(shiny)
library(dplyr)
library(shiny)
library(dplyr)
library(DT)
# Read the JSON data
data <- fromJSON("anaesthesia_data.json")
# Convert the data to a data frame
df <- as.data.frame(data)
# Define UI
ui <- fluidPage(
titlePanel("ASA Relative Value Guide"),
sidebarLayout(
sidebarPanel(
selectInput("group", "Select Group:",
choices = c("All", unique(df$Group)),
selected = "All")
),
mainPanel(
DTOutput("data_table")
)
)
)
